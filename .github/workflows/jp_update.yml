name: Dump JP Update

on:
  schedule:
    # Run every Tuesday at 05:00 and 09:00 UTC
    - cron: '0 5,9 * * 2'
    # Run everyday at 07:00 UTC
    - cron: '0 7 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  dump-jp-update:
    environment: "GitHub Action"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Update remote branch references
        run: git fetch --all --tags

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.x'
          
      - name: Install Dependencies for Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install git-lfs jq

      - name: Install Python Dependencies
        run: pip install -r requirements.txt

      - name: Get APK & Dumper
        run: python getApkData.py --region jp
      
      - name: Set executable permissions for dumper
        run: |
          chmod +x ./dump_lib/Il2CppInspector/Il2CppInspector.Redux.CLI
          chmod +x ./dump_lib/FbsDumper/FbsDumper

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Run Dumper
        run: python getJPVersion.py

      - name: Switch Branch
        run: git checkout jp-dump

      - name: Check if config.json changed
        id: check_diff
        run: |
          config_file="jp_data/config.json"
          changed_flag=false

          # Get the SHA256 hash of the newly generated file
          NEW_HASH=$(sha256sum "$config_file" | awk '{print $1}')
          
          # Get the SHA256 hash of the file content from the last commit on the remote branch
          OLD_HASH=$(git show origin/jp-dump:"$config_file" | sha256sum | awk '{print $1}')
          
          echo "--- Hash Comparison ---"
          echo "OLD_HASH (origin/jp-dump) : $OLD_HASH"
          echo "NEW_HASH (Local): $NEW_HASH"
          echo "-----------------------"

          if [ -z "$OLD_HASH" ]; then
            echo "⚠️ File does not exist on remote branch. Treat as changed."
            changed_flag=true
          elif [ "$OLD_HASH" != "$NEW_HASH" ]; then
            echo "⚠️ Hashes differ. File has been modified."
            changed_flag=true
          else
            echo "✅ Hashes are identical. No content change detected."
          fi

          echo "changed=$changed_flag" >> $GITHUB_OUTPUT

      - name: Configure Git LFS
        if: steps.check_diff.outputs.changed == 'true'
        run: |
          git lfs install
          
          find ./jp_data -type f -size +50M -exec git lfs track {} \;

          if [ -f .gitattributes ]; then
            git add .gitattributes
            echo ".gitattributes has been updated"
          else
            echo "No files larger than 50MB were found."
          fi

      - name: Commit and Push Update
        if: steps.check_diff.outputs.changed == 'true'
        run: |
          # jq and sed commands are cross-platform compatible in bash
          raw_game_url=$(jq -r '.ServerInfoDataUrl' jp_data/config.json)
          raw_catalog=$(jq -r '.ConnectionGroups[0].OverrideConnectionGroups | .[-1].AddressablesCatalogUrlRoot' jp_data/config.json)
          
          game_url=$(echo "$raw_game_url" | sed -n 's#.*/\([^/]*\)\.json#\1#p')
          catalog=$(echo "$raw_catalog" | sed -n 's#.*/\([^/]*\)$#\1#p')
          
          commit_msg="${game_url}_${catalog}"
          
          git add jp_data
          git commit -m "$commit_msg"
          git push origin jp-dump

      - name: Send update to Discord
        if: steps.check_diff.outputs.changed == 'true'
        run: |
          commit_hash=$(git rev-parse HEAD)
          commit_url="https://github.com/${GITHUB_REPOSITORY}/commit/${commit_hash}"
          prepath_raw_link="https://github.com/${GITHUB_REPOSITORY}/raw/${commit_hash}/jp_data/"
          treepath_link="https://github.com/${GITHUB_REPOSITORY}/tree/${commit_hash}/jp_data/"

          config_link="${prepath_raw_link}/config.json"
          dump_data_link="${prepath_raw_link}/cs/il2cpp.cs"
          fbs_v1_data_link="${prepath_raw_link}/BlueArchiveV1.fbs"
          fbs_v2_data_link="${prepath_raw_link}/BlueArchiveV2.fbs"
          dll_files="${treepath_link}/dll"

          raw_game_url=$(jq -r '.ServerInfoDataUrl' jp_data/config.json)
          game_url=$(echo "$raw_game_url" | sed -n 's#.*/\([^/]*\)\.json#\1#p')

          catalog_version=$(jq -r '.ConnectionGroups[0].OverrideConnectionGroups | .[-1].Name' jp_data/config.json)
          raw_catalog=$(jq -r '.ConnectionGroups[0].OverrideConnectionGroups | .[-1].AddressablesCatalogUrlRoot' jp_data/config.json)
          catalog_id=$(echo "$raw_catalog" | sed -n 's#.*/\([^/]*\)$#\1#p')

          embed_description=$(cat <<EOF
          **Game Info**
          Server Info Data Url: [${game_url}](${raw_game_url})
          Catalog Version: ${catalog_version}
          Catalog Url: ${catalog_id}

          **Game Data**
          Config Data: [config.json](${config_link})
          Dump Data: [il2cpp.cs](${dump_data_link})
          FBS V1 (DummyDll Dump): [BlueArchiveV1.fbs](${fbs_v1_data_link})
          FBS V2 (Assembly Dump): [BlueArchiveV2.fbs](${fbs_v2_data_link})
          DummyDLL Files: [DummyDll](${dll_files})
          EOF
          )

          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          payload=$(jq -n \
            --arg title "JP Config Update" \
            --arg description "$embed_description" \
            --arg url "$commit_url" \
            --arg timestamp "$timestamp" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "url": $url,
                  "color": 255,
                  "timestamp": $timestamp
                }
              ]
            }')

          curl -H "Content-Type: application/json" \
              -X POST \
              -d "$payload" \
              "${{ secrets.DISCORD_WEBHOOK_URL }}"
          echo "Discord notification sent."